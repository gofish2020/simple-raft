// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: pkg/raftpb/raft.proto

package raftpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RaftInternalClient is the client API for RaftInternal service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RaftInternalClient interface {
	Send(ctx context.Context, opts ...grpc.CallOption) (RaftInternal_SendClient, error)
}

type raftInternalClient struct {
	cc grpc.ClientConnInterface
}

func NewRaftInternalClient(cc grpc.ClientConnInterface) RaftInternalClient {
	return &raftInternalClient{cc}
}

func (c *raftInternalClient) Send(ctx context.Context, opts ...grpc.CallOption) (RaftInternal_SendClient, error) {
	stream, err := c.cc.NewStream(ctx, &RaftInternal_ServiceDesc.Streams[0], "/raftpb.RaftInternal/send", opts...)
	if err != nil {
		return nil, err
	}
	x := &raftInternalSendClient{stream}
	return x, nil
}

type RaftInternal_SendClient interface {
	Send(*RaftMessage) error
	Recv() (*RaftMessage, error)
	grpc.ClientStream
}

type raftInternalSendClient struct {
	grpc.ClientStream
}

func (x *raftInternalSendClient) Send(m *RaftMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *raftInternalSendClient) Recv() (*RaftMessage, error) {
	m := new(RaftMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RaftInternalServer is the server API for RaftInternal service.
// All implementations must embed UnimplementedRaftInternalServer
// for forward compatibility
type RaftInternalServer interface {
	Send(RaftInternal_SendServer) error
	mustEmbedUnimplementedRaftInternalServer()
}

// UnimplementedRaftInternalServer must be embedded to have forward compatible implementations.
type UnimplementedRaftInternalServer struct {
}

func (UnimplementedRaftInternalServer) Send(RaftInternal_SendServer) error {
	return status.Errorf(codes.Unimplemented, "method Send not implemented")
}
func (UnimplementedRaftInternalServer) mustEmbedUnimplementedRaftInternalServer() {}

// UnsafeRaftInternalServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RaftInternalServer will
// result in compilation errors.
type UnsafeRaftInternalServer interface {
	mustEmbedUnimplementedRaftInternalServer()
}

func RegisterRaftInternalServer(s grpc.ServiceRegistrar, srv RaftInternalServer) {
	s.RegisterService(&RaftInternal_ServiceDesc, srv)
}

func _RaftInternal_Send_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RaftInternalServer).Send(&raftInternalSendServer{stream})
}

type RaftInternal_SendServer interface {
	Send(*RaftMessage) error
	Recv() (*RaftMessage, error)
	grpc.ServerStream
}

type raftInternalSendServer struct {
	grpc.ServerStream
}

func (x *raftInternalSendServer) Send(m *RaftMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *raftInternalSendServer) Recv() (*RaftMessage, error) {
	m := new(RaftMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RaftInternal_ServiceDesc is the grpc.ServiceDesc for RaftInternal service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RaftInternal_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "raftpb.RaftInternal",
	HandlerType: (*RaftInternalServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "send",
			Handler:       _RaftInternal_Send_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "pkg/raftpb/raft.proto",
}

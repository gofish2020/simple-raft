// Code generated by goyacc - DO NOT EDIT.

package parser

import __yyfmt__ "fmt"

import (
	"fmt"
	"strconv"
)

var stmt interface{}
var stmtType StmtType

func GetStmt() (interface{}, StmtType) {
	return stmt, stmtType
}

type yySymType struct {
	yys             int
	strVal          string
	selectStmt      *SelectStmt
	selectFieldList SelectFieldList
	selectStmtFrom  *SelectStmtFrom
	selectStmtWhere *SelectStmtWhere
	orderFieldList  OrderFieldList
	selectStmtLimit *SelectStmtLimit

	insertStmt *InsertStmt
	valueList  [][]string

	compareOp CompareOp
	boolVal   bool
	strList   []string
}

type yyXError struct {
	state, xsym int
}

const (
	yyDefault = 57365
	yyEofCode = 57344
	AND       = 57355
	ASC       = 57353
	BY        = 57350
	DESC      = 57354
	FROM      = 57347
	INSERT    = 57357
	INTO      = 57358
	LIMIT     = 57351
	OFFSET    = 57352
	OR        = 57356
	ORDER     = 57349
	SELECT    = 57346
	VAL       = 57364
	VALUE     = 57359
	VALUES    = 57360
	WHERE     = 57348
	yyErrCode = 57345
	ge        = 57363
	le        = 57362
	ne        = 57361

	yyMaxDepth = 200
	yyTabOfs   = -43
)

var (
	yyPrec = map[int]int{
		OR:  0,
		AND: 1,
		'+': 2,
		'-': 2,
		'*': 3,
		'/': 3,
	}

	yyXLAT = map[int]int{
		59:    0,  // ';' (28x)
		57364: 1,  // VAL (27x)
		44:    2,  // ',' (23x)
		57351: 3,  // LIMIT (18x)
		41:    4,  // ')' (8x)
		57349: 5,  // ORDER (7x)
		57344: 6,  // $end (6x)
		40:    7,  // '(' (6x)
		57355: 8,  // AND (4x)
		57356: 9,  // OR (4x)
		60:    10, // '<' (3x)
		61:    11, // '=' (3x)
		62:    12, // '>' (3x)
		57369: 13, // CompareOp (3x)
		57347: 14, // FROM (3x)
		57363: 15, // ge (3x)
		57362: 16, // le (3x)
		57361: 17, // ne (3x)
		57353: 18, // ASC (2x)
		57366: 19, // ASCEND (2x)
		57354: 20, // DESC (2x)
		57377: 21, // SelectStmtLimit (2x)
		57359: 22, // VALUE (2x)
		57380: 23, // ValueGroup (2x)
		57381: 24, // ValueList (2x)
		57360: 25, // VALUES (2x)
		57348: 26, // WHERE (2x)
		57350: 27, // BY (1x)
		57367: 28, // ColumnGroup (1x)
		57368: 29, // ColumnList (1x)
		57357: 30, // INSERT (1x)
		57370: 31, // InsertStmt (1x)
		57371: 32, // InsertStmtInto (1x)
		57372: 33, // InsertStmtValue (1x)
		57358: 34, // INTO (1x)
		57352: 35, // OFFSET (1x)
		57373: 36, // OrderFieldList (1x)
		57346: 37, // SELECT (1x)
		57374: 38, // SelectFieldList (1x)
		57375: 39, // SelectStmt (1x)
		57376: 40, // SelectStmtFrom (1x)
		57378: 41, // SelectStmtOrder (1x)
		57379: 42, // SelectStmtWhere (1x)
		57383: 43, // start (1x)
		57382: 44, // WhereTree (1x)
		57365: 45, // $default (0x)
		42:    46, // '*' (0x)
		43:    47, // '+' (0x)
		45:    48, // '-' (0x)
		47:    49, // '/' (0x)
		57345: 50, // error (0x)
	}

	yySymNames = []string{
		"';'",
		"VAL",
		"','",
		"LIMIT",
		"')'",
		"ORDER",
		"$end",
		"'('",
		"AND",
		"OR",
		"'<'",
		"'='",
		"'>'",
		"CompareOp",
		"FROM",
		"ge",
		"le",
		"ne",
		"ASC",
		"ASCEND",
		"DESC",
		"SelectStmtLimit",
		"VALUE",
		"ValueGroup",
		"ValueList",
		"VALUES",
		"WHERE",
		"BY",
		"ColumnGroup",
		"ColumnList",
		"INSERT",
		"InsertStmt",
		"InsertStmtInto",
		"InsertStmtValue",
		"INTO",
		"OFFSET",
		"OrderFieldList",
		"SELECT",
		"SelectFieldList",
		"SelectStmt",
		"SelectStmtFrom",
		"SelectStmtOrder",
		"SelectStmtWhere",
		"start",
		"WhereTree",
		"$default",
		"'*'",
		"'+'",
		"'-'",
		"'/'",
		"error",
	}

	yyTokenLiteralStrings = map[int]string{
		57351: "LIMIT",
		57349: "ORDER",
		57355: "AND",
		57356: "OR",
		57347: "FROM",
		57363: ">=",
		57362: "<=",
		57361: "!=",
		57353: "ASC",
		57354: "DESC",
		57359: "VALUE",
		57360: "VALUES",
		57348: "WHERE",
		57350: "BY",
		57357: "INSERT",
		57358: "INTO",
		57352: "OFFSET",
		57346: "SELECT",
	}

	yyReductions = map[int]struct{ xsym, components int }{
		0:  {0, 1},
		1:  {43, 1},
		2:  {43, 1},
		3:  {31, 5},
		4:  {32, 1},
		5:  {32, 2},
		6:  {28, 3},
		7:  {29, 0},
		8:  {29, 1},
		9:  {29, 3},
		10: {33, 2},
		11: {33, 2},
		12: {23, 3},
		13: {23, 5},
		14: {24, 1},
		15: {24, 3},
		16: {39, 4},
		17: {39, 7},
		18: {38, 1},
		19: {38, 3},
		20: {40, 2},
		21: {42, 0},
		22: {42, 2},
		23: {44, 3},
		24: {44, 5},
		25: {44, 5},
		26: {13, 1},
		27: {13, 1},
		28: {13, 1},
		29: {13, 1},
		30: {13, 1},
		31: {13, 1},
		32: {41, 0},
		33: {41, 3},
		34: {36, 2},
		35: {36, 4},
		36: {19, 0},
		37: {19, 1},
		38: {19, 1},
		39: {21, 0},
		40: {21, 2},
		41: {21, 4},
		42: {21, 4},
	}

	yyXErrors = map[yyXError]string{}

	yyParseTab = [81][]uint8{
		// 0
		{30: 47, 46, 37: 48, 39: 45, 43: 44},
		{6: 43},
		{6: 42},
		{6: 41},
		{1: 98, 32: 97, 34: 99},
		// 5
		{1: 50, 38: 49},
		{4, 2: 53, 55, 14: 54, 21: 51, 40: 52},
		{25, 2: 25, 25, 14: 25},
		{96},
		{22, 3: 22, 5: 22, 26: 64, 42: 63},
		// 10
		{1: 62},
		{1: 61},
		{1: 56},
		{3, 2: 57, 35: 58},
		{1: 60},
		// 15
		{1: 59},
		{1},
		{2},
		{23, 3: 23, 5: 23, 26: 23},
		{24, 2: 24, 24, 14: 24},
		// 20
		{11, 3: 11, 5: 84, 41: 83},
		{1: 66, 44: 65},
		{21, 3: 21, 5: 21, 8: 76, 75},
		{10: 69, 68, 70, 67, 15: 72, 71, 73},
		{1: 74},
		// 25
		{1: 17},
		{1: 16},
		{1: 15},
		{1: 14},
		{1: 13},
		// 30
		{1: 12},
		{20, 3: 20, 5: 20, 8: 20, 20},
		{1: 80},
		{1: 77},
		{10: 69, 68, 70, 78, 15: 72, 71, 73},
		// 35
		{1: 79},
		{18, 3: 18, 5: 18, 8: 18, 18},
		{10: 69, 68, 70, 81, 15: 72, 71, 73},
		{1: 82},
		{19, 3: 19, 5: 19, 8: 19, 19},
		// 40
		{4, 3: 55, 21: 94},
		{27: 85},
		{1: 87, 36: 86},
		{10, 2: 91, 10},
		{7, 2: 7, 7, 18: 89, 88, 90},
		// 45
		{9, 2: 9, 9},
		{6, 2: 6, 6},
		{5, 2: 5, 5},
		{1: 92},
		{7, 2: 7, 7, 18: 89, 93, 90},
		// 50
		{8, 2: 8, 8},
		{95},
		{6: 26},
		{6: 27},
		{7: 102, 28: 101},
		// 55
		{7: 39},
		{1: 100},
		{7: 38},
		{22: 110, 25: 109, 33: 108},
		{1: 104, 36, 4: 36, 29: 103},
		// 60
		{2: 106, 4: 105},
		{2: 35, 4: 35},
		{22: 37, 25: 37},
		{1: 107},
		{2: 34, 4: 34},
		// 65
		{123},
		{7: 112, 23: 122},
		{7: 112, 23: 111},
		{32, 2: 118},
		{1: 114, 24: 113},
		// 70
		{2: 116, 4: 115},
		{2: 29, 4: 29},
		{31, 2: 31},
		{1: 117},
		{2: 28, 4: 28},
		// 75
		{7: 119},
		{1: 114, 24: 120},
		{2: 116, 4: 121},
		{30, 2: 30},
		{33, 2: 118},
		// 80
		{6: 40},
	}
)

var yyDebug = 0

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyLexerEx interface {
	yyLexer
	Reduced(rule, state int, lval *yySymType) bool
}

func yySymName(c int) (s string) {
	x, ok := yyXLAT[c]
	if ok {
		return yySymNames[x]
	}

	if c < 0x7f {
		return __yyfmt__.Sprintf("%q", c)
	}

	return __yyfmt__.Sprintf("%d", c)
}

func yylex1(yylex yyLexer, lval *yySymType) (n int) {
	n = yylex.Lex(lval)
	if n <= 0 {
		n = yyEofCode
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("\nlex %s(%#x %d), lval: %+v\n", yySymName(n), n, n, lval)
	}
	return n
}

func yyParse(yylex yyLexer) int {
	const yyError = 50

	yyEx, _ := yylex.(yyLexerEx)
	var yyn int
	var yylval yySymType
	var yyVAL yySymType
	yyS := make([]yySymType, 200)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yyerrok := func() {
		if yyDebug >= 2 {
			__yyfmt__.Printf("yyerrok()\n")
		}
		Errflag = 0
	}
	_ = yyerrok
	yystate := 0
	yychar := -1
	var yyxchar int
	var yyshift int
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	if yychar < 0 {
		yylval.yys = yystate
		yychar = yylex1(yylex, &yylval)
		var ok bool
		if yyxchar, ok = yyXLAT[yychar]; !ok {
			yyxchar = len(yySymNames) // > tab width
		}
	}
	if yyDebug >= 4 {
		var a []int
		for _, v := range yyS[:yyp+1] {
			a = append(a, v.yys)
		}
		__yyfmt__.Printf("state stack %v\n", a)
	}
	row := yyParseTab[yystate]
	yyn = 0
	if yyxchar < len(row) {
		if yyn = int(row[yyxchar]); yyn != 0 {
			yyn += yyTabOfs
		}
	}
	switch {
	case yyn > 0: // shift
		yychar = -1
		yyVAL = yylval
		yystate = yyn
		yyshift = yyn
		if yyDebug >= 2 {
			__yyfmt__.Printf("shift, and goto state %d\n", yystate)
		}
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	case yyn < 0: // reduce
	case yystate == 1: // accept
		if yyDebug >= 2 {
			__yyfmt__.Println("accept")
		}
		goto ret0
	}

	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			if yyDebug >= 1 {
				__yyfmt__.Printf("no action for %s in state %d\n", yySymName(yychar), yystate)
			}
			msg, ok := yyXErrors[yyXError{yystate, yyxchar}]
			if !ok {
				msg, ok = yyXErrors[yyXError{yystate, -1}]
			}
			if !ok && yyshift != 0 {
				msg, ok = yyXErrors[yyXError{yyshift, yyxchar}]
			}
			if !ok {
				msg, ok = yyXErrors[yyXError{yyshift, -1}]
			}
			if yychar > 0 {
				ls := yyTokenLiteralStrings[yychar]
				if ls == "" {
					ls = yySymName(yychar)
				}
				if ls != "" {
					switch {
					case msg == "":
						msg = __yyfmt__.Sprintf("unexpected %s", ls)
					default:
						msg = __yyfmt__.Sprintf("unexpected %s, %s", ls, msg)
					}
				}
			}
			if msg == "" {
				msg = "syntax error"
			}
			yylex.Error(msg)
			Nerrs++
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				row := yyParseTab[yyS[yyp].yys]
				if yyError < len(row) {
					yyn = int(row[yyError]) + yyTabOfs
					if yyn > 0 { // hit
						if yyDebug >= 2 {
							__yyfmt__.Printf("error recovery found error shift in state %d\n", yyS[yyp].yys)
						}
						yystate = yyn /* simulate a shift of "error" */
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery failed\n")
			}
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yySymName(yychar))
			}
			if yychar == yyEofCode {
				goto ret1
			}

			yychar = -1
			goto yynewstate /* try again in the same state */
		}
	}

	r := -yyn
	x0 := yyReductions[r]
	x, n := x0.xsym, x0.components
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= n
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	exState := yystate
	yystate = int(yyParseTab[yyS[yyp].yys][x]) + yyTabOfs
	/* reduction by production r */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce using rule %v (%s), and goto state %d\n", r, yySymNames[x], yystate)
	}

	switch r {
	case 1:
		{
			stmt = yyS[yypt-0].selectStmt
			stmtType = SELECT_STMT
		}
	case 2:
		{
			stmt = yyS[yypt-0].insertStmt
			stmtType = INSERT_STMT
		}
	case 3:
		{
			yyVAL.insertStmt = &InsertStmt{Into: yyS[yypt-3].strVal, ColumnList: yyS[yypt-2].strList, ValueList: yyS[yypt-1].valueList}
		}
	case 4:
		{
			yyVAL.strVal = yyS[yypt-0].strVal
		}
	case 5:
		{
			yyVAL.strVal = yyS[yypt-0].strVal
		}
	case 6:
		{
			yyVAL.strList = yyS[yypt-1].strList
		}
	case 7:
		{
			yyVAL.strList = nil
		}
	case 8:
		{
			yyVAL.strList = []string{yyS[yypt-0].strVal}
		}
	case 9:
		{
			yyVAL.strList = append(yyS[yypt-2].strList, yyS[yypt-0].strVal)
		}
	case 10:
		{
			yyVAL.valueList = yyS[yypt-0].valueList
		}
	case 11:
		{
			yyVAL.valueList = yyS[yypt-0].valueList
		}
	case 12:
		{
			yyVAL.valueList = [][]string{yyS[yypt-1].strList}
		}
	case 13:
		{
			yyVAL.valueList = append(yyS[yypt-4].valueList, yyS[yypt-1].strList)
		}
	case 14:
		{
			yyVAL.strList = []string{yyS[yypt-0].strVal}
		}
	case 15:
		{
			yyVAL.strList = append(yyS[yypt-2].strList, yyS[yypt-0].strVal)
		}
	case 16:
		{
			yyVAL.selectStmt = &SelectStmt{Filed: yyS[yypt-2].selectFieldList, Limit: yyS[yypt-1].selectStmtLimit}
		}
	case 17:
		{
			yyVAL.selectStmt = &SelectStmt{Filed: yyS[yypt-5].selectFieldList, From: yyS[yypt-4].selectStmtFrom, Where: yyS[yypt-3].selectStmtWhere, Order: yyS[yypt-2].orderFieldList, Limit: yyS[yypt-1].selectStmtLimit}
		}
	case 18:
		{
			yyVAL.selectFieldList = SelectFieldList{&SelectField{Field: yyS[yypt-0].strVal}}
		}
	case 19:
		{
			yyVAL.selectFieldList = append(yyS[yypt-2].selectFieldList, &SelectField{Field: yyS[yypt-0].strVal})
		}
	case 20:
		{
			yyVAL.selectStmtFrom = &SelectStmtFrom{
				Table: yyS[yypt-0].strVal,
			}
		}
	case 21:
		{
			yyVAL.selectStmtWhere = nil
		}
	case 22:
		{
			yyVAL.selectStmtWhere = yyS[yypt-0].selectStmtWhere
		}
	case 23:
		{
			yyVAL.selectStmtWhere = &SelectStmtWhere{Field: &WhereField{Field: yyS[yypt-2].strVal, Value: yyS[yypt-0].strVal, Compare: yyS[yypt-1].compareOp}}
		}
	case 24:
		{
			yyS[yypt-4].selectStmtWhere.Or = &WhereField{Field: yyS[yypt-2].strVal, Value: yyS[yypt-0].strVal, Compare: yyS[yypt-1].compareOp}
			yyVAL.selectStmtWhere = yyS[yypt-4].selectStmtWhere
		}
	case 25:
		{
			yyS[yypt-4].selectStmtWhere.And = &WhereField{Field: yyS[yypt-2].strVal, Value: yyS[yypt-0].strVal, Compare: yyS[yypt-1].compareOp}
			yyVAL.selectStmtWhere = yyS[yypt-4].selectStmtWhere
		}
	case 26:
		{
			yyVAL.compareOp = EQ
		}
	case 27:
		{
			yyVAL.compareOp = LT
		}
	case 28:
		{
			yyVAL.compareOp = GT
		}
	case 29:
		{
			yyVAL.compareOp = LE
		}
	case 30:
		{
			yyVAL.compareOp = GE
		}
	case 31:
		{
			yyVAL.compareOp = NE
		}
	case 32:
		{
			yyVAL.orderFieldList = nil
		}
	case 33:
		{
			yyVAL.orderFieldList = yyS[yypt-0].orderFieldList
		}
	case 34:
		{
			yyVAL.orderFieldList = OrderFieldList{&OrderField{Field: yyS[yypt-1].strVal, Asc: yyS[yypt-0].boolVal}}
		}
	case 35:
		{
			yyVAL.orderFieldList = append(yyS[yypt-3].orderFieldList, &OrderField{Field: yyS[yypt-1].strVal, Asc: yyS[yypt-0].boolVal})
		}
	case 36:
		{
			yyVAL.boolVal = true
		}
	case 37:
		{
			yyVAL.boolVal = true
		}
	case 38:
		{
			yyVAL.boolVal = false
		}
	case 39:
		{
			yyVAL.selectStmtLimit = nil
		}
	case 40:
		{
			size, err := strconv.Atoi(yyS[yypt-0].strVal)
			if err != nil {
				fmt.Println(err)
				return -1
			}
			yyVAL.selectStmtLimit = &SelectStmtLimit{Size: size}
		}
	case 41:
		{

			offset, err := strconv.Atoi(yyS[yypt-2].strVal)
			if err != nil {
				__yyfmt__.Println(err)
				goto ret1
			}
			size, err := strconv.Atoi(yyS[yypt-0].strVal)
			if err != nil {
				__yyfmt__.Println(err)
				goto ret1
			}
			yyVAL.selectStmtLimit = &SelectStmtLimit{Offset: offset, Size: size}
		}
	case 42:
		{
			offset, err := strconv.Atoi(yyS[yypt-0].strVal)
			if err != nil {
				__yyfmt__.Println(err)
				goto ret1
			}
			size, err := strconv.Atoi(yyS[yypt-2].strVal)
			if err != nil {
				__yyfmt__.Println(err)
				goto ret1
			}
			yyVAL.selectStmtLimit = &SelectStmtLimit{Offset: offset, Size: size}
		}

	}

	if yyEx != nil && yyEx.Reduced(r, exState, &yyVAL) {
		return -1
	}
	goto yystack /* stack new state and value */
}

// Code generated by goyacc - DO NOT EDIT.

package sql

import __yyfmt__ "fmt"

import (
	"fmt"
	"strconv"
)

type yySymType struct {
	yys int
	str string

	stmt     Statment
	stmtList []Statment

	createStmt     *CreateStmt
	tableDef       *TableDef
	columnDef      *ColumnDef
	indexDef       *IndexDef
	tableOption    *TableOption
	columnDataType ColumnDataType

	selectStmt      *SelectStmt
	selectFieldList SelectFieldList
	selectStmtFrom  *SelectStmtFrom
	selectStmtWhere *SelectStmtWhere
	orderFieldList  OrderFieldList
	selectStmtLimit *SelectStmtLimit
	compareOp       CompareOp

	insertStmt *InsertStmt
	valueList  [][]string

	boolean bool
	strList []string
}

type yyXError struct {
	state, xsym int
}

const (
	yyDefault  = 57375
	yyEofCode  = 57344
	AND        = 57365
	ASC        = 57363
	BY         = 57360
	COMP_GE    = 57373
	COMP_LE    = 57372
	COMP_NE    = 57371
	CONSTRAINT = 57352
	CREATE     = 57346
	DEFAULT    = 57355
	DESC       = 57364
	FROM       = 57357
	INDEX      = 57350
	INSERT     = 57367
	INTO       = 57368
	KEY        = 57351
	LIMIT      = 57361
	NOT        = 57353
	NULL       = 57354
	OFFSET     = 57362
	OR         = 57366
	ORDER      = 57359
	PRIMARY    = 57348
	SELECT     = 57356
	TABLE      = 57347
	UNIQUE     = 57349
	VALUE      = 57369
	VALUES     = 57370
	VARIABLE   = 57374
	WHERE      = 57358
	yyErrCode  = 57345

	yyMaxDepth = 200
	yyTabOfs   = -68
)

var (
	yyPrec = map[int]int{
		OR:  0,
		AND: 1,
		'+': 2,
		'-': 2,
		'*': 3,
		'/': 3,
	}

	yyXLAT = map[int]int{
		44:    0,  // ',' (42x)
		57374: 1,  // VARIABLE (38x)
		59:    2,  // ';' (30x)
		41:    3,  // ')' (29x)
		57361: 4,  // LIMIT (18x)
		57344: 5,  // $end (11x)
		57346: 6,  // CREATE (11x)
		57367: 7,  // INSERT (11x)
		57356: 8,  // SELECT (11x)
		40:    9,  // '(' (10x)
		57359: 10, // ORDER (7x)
		57403: 11, // VaribleList (6x)
		57355: 12, // DEFAULT (5x)
		57365: 13, // AND (4x)
		57351: 14, // KEY (4x)
		57354: 15, // NULL (4x)
		57366: 16, // OR (4x)
		60:    17, // '<' (3x)
		61:    18, // '=' (3x)
		62:    19, // '>' (3x)
		57373: 20, // COMP_GE (3x)
		57372: 21, // COMP_LE (3x)
		57371: 22, // COMP_NE (3x)
		57382: 23, // CompareOp (3x)
		57357: 24, // FROM (3x)
		57350: 25, // INDEX (3x)
		57386: 26, // IndexKey (3x)
		57363: 27, // ASC (2x)
		57377: 28, // Ascend (2x)
		57379: 29, // ColumnDef (2x)
		57383: 30, // CreateStmt (2x)
		57364: 31, // DESC (2x)
		57385: 32, // IndexDef (2x)
		57387: 33, // InsertStmt (2x)
		57353: 34, // NOT (2x)
		57348: 35, // PRIMARY (2x)
		57391: 36, // PrimaryDef (2x)
		57393: 37, // SelectStmt (2x)
		57395: 38, // SelectStmtLimit (2x)
		57398: 39, // Stmt (2x)
		57349: 40, // UNIQUE (2x)
		57369: 41, // VALUE (2x)
		57402: 42, // ValueGroup (2x)
		57370: 43, // VALUES (2x)
		57358: 44, // WHERE (2x)
		57376: 45, // AllowNull (1x)
		57360: 46, // BY (1x)
		57378: 47, // ColumnDataType (1x)
		57380: 48, // ColumnGroup (1x)
		57381: 49, // ColumnList (1x)
		57384: 50, // DefaultValue (1x)
		57388: 51, // InsertStmtInto (1x)
		57389: 52, // InsertStmtValue (1x)
		57368: 53, // INTO (1x)
		57362: 54, // OFFSET (1x)
		57390: 55, // OrderFieldList (1x)
		57392: 56, // SelectFieldList (1x)
		57394: 57, // SelectStmtFrom (1x)
		57396: 58, // SelectStmtOrder (1x)
		57397: 59, // SelectStmtWhere (1x)
		57405: 60, // start (1x)
		57399: 61, // StmtList (1x)
		57347: 62, // TABLE (1x)
		57400: 63, // TableDef (1x)
		57401: 64, // TableOption (1x)
		57404: 65, // WhereTree (1x)
		57375: 66, // $default (0x)
		42:    67, // '*' (0x)
		43:    68, // '+' (0x)
		45:    69, // '-' (0x)
		47:    70, // '/' (0x)
		57352: 71, // CONSTRAINT (0x)
		57345: 72, // error (0x)
	}

	yySymNames = []string{
		"','",
		"VARIABLE",
		"';'",
		"')'",
		"LIMIT",
		"$end",
		"CREATE",
		"INSERT",
		"SELECT",
		"'('",
		"ORDER",
		"VaribleList",
		"DEFAULT",
		"AND",
		"KEY",
		"NULL",
		"OR",
		"'<'",
		"'='",
		"'>'",
		"COMP_GE",
		"COMP_LE",
		"COMP_NE",
		"CompareOp",
		"FROM",
		"INDEX",
		"IndexKey",
		"ASC",
		"Ascend",
		"ColumnDef",
		"CreateStmt",
		"DESC",
		"IndexDef",
		"InsertStmt",
		"NOT",
		"PRIMARY",
		"PrimaryDef",
		"SelectStmt",
		"SelectStmtLimit",
		"Stmt",
		"UNIQUE",
		"VALUE",
		"ValueGroup",
		"VALUES",
		"WHERE",
		"AllowNull",
		"BY",
		"ColumnDataType",
		"ColumnGroup",
		"ColumnList",
		"DefaultValue",
		"InsertStmtInto",
		"InsertStmtValue",
		"INTO",
		"OFFSET",
		"OrderFieldList",
		"SelectFieldList",
		"SelectStmtFrom",
		"SelectStmtOrder",
		"SelectStmtWhere",
		"start",
		"StmtList",
		"TABLE",
		"TableDef",
		"TableOption",
		"WhereTree",
		"$default",
		"'*'",
		"'+'",
		"'-'",
		"'/'",
		"CONSTRAINT",
		"error",
	}

	yyTokenLiteralStrings = map[int]string{
		57361: "LIMIT",
		57346: "CREATE",
		57367: "INSERT",
		57356: "SELECT",
		57359: "ORDER",
		57355: "DEFAULT",
		57365: "AND",
		57351: "KEY",
		57354: "NULL",
		57366: "OR",
		57373: ">=",
		57372: "<=",
		57371: "!=",
		57357: "FROM",
		57350: "INDEX",
		57363: "ASC",
		57364: "DESC",
		57353: "NOT",
		57348: "PRIMARY",
		57349: "UNIQUE",
		57369: "VALUE",
		57370: "VALUES",
		57358: "WHERE",
		57360: "BY",
		57368: "INTO",
		57362: "OFFSET",
		57347: "TABLE",
		57352: "CONSTRAINT",
	}

	yyReductions = map[int]struct{ xsym, components int }{
		0:  {0, 1},
		1:  {60, 1},
		2:  {61, 1},
		3:  {61, 2},
		4:  {39, 1},
		5:  {39, 1},
		6:  {39, 1},
		7:  {30, 8},
		8:  {63, 1},
		9:  {63, 1},
		10: {63, 1},
		11: {63, 3},
		12: {63, 3},
		13: {63, 3},
		14: {29, 4},
		15: {32, 5},
		16: {32, 6},
		17: {36, 5},
		18: {26, 1},
		19: {26, 1},
		20: {47, 1},
		21: {45, 0},
		22: {45, 1},
		23: {45, 2},
		24: {50, 0},
		25: {50, 1},
		26: {50, 2},
		27: {50, 2},
		28: {64, 0},
		29: {33, 5},
		30: {51, 1},
		31: {51, 2},
		32: {48, 3},
		33: {49, 0},
		34: {49, 1},
		35: {52, 2},
		36: {52, 2},
		37: {42, 3},
		38: {42, 5},
		39: {37, 4},
		40: {37, 7},
		41: {56, 1},
		42: {56, 3},
		43: {57, 2},
		44: {59, 0},
		45: {59, 2},
		46: {65, 3},
		47: {65, 5},
		48: {65, 5},
		49: {23, 1},
		50: {23, 1},
		51: {23, 1},
		52: {23, 1},
		53: {23, 1},
		54: {23, 1},
		55: {58, 0},
		56: {58, 3},
		57: {55, 2},
		58: {55, 4},
		59: {28, 0},
		60: {28, 1},
		61: {28, 1},
		62: {38, 0},
		63: {38, 2},
		64: {38, 4},
		65: {38, 4},
		66: {11, 1},
		67: {11, 3},
	}

	yyXErrors = map[yyXError]string{}

	yyParseTab = [127][]uint16{
		// 0
		{6: 75, 76, 77, 30: 72, 33: 74, 37: 73, 39: 71, 60: 69, 70},
		{5: 68},
		{5: 67, 75, 76, 77, 30: 72, 33: 74, 37: 73, 39: 194},
		{5: 66, 66, 66, 66},
		{5: 64, 64, 64, 64},
		// 5
		{5: 63, 63, 63, 63},
		{5: 62, 62, 62, 62},
		{62: 151},
		{1: 127, 51: 126, 53: 128},
		{1: 79, 56: 78},
		// 10
		{82, 2: 6, 4: 84, 24: 83, 38: 80, 57: 81},
		{27, 2: 27, 4: 27, 24: 27},
		{2: 125},
		{2: 24, 4: 24, 10: 24, 44: 93, 59: 92},
		{1: 91},
		// 15
		{1: 90},
		{1: 85},
		{86, 2: 5, 54: 87},
		{1: 89},
		{1: 88},
		// 20
		{2: 3},
		{2: 4},
		{2: 25, 4: 25, 10: 25, 44: 25},
		{26, 2: 26, 4: 26, 24: 26},
		{2: 13, 4: 13, 10: 113, 58: 112},
		// 25
		{1: 95, 65: 94},
		{2: 23, 4: 23, 10: 23, 13: 105, 16: 104},
		{17: 98, 97, 99, 101, 100, 102, 96},
		{1: 103},
		{1: 19},
		// 30
		{1: 18},
		{1: 17},
		{1: 16},
		{1: 15},
		{1: 14},
		// 35
		{2: 22, 4: 22, 10: 22, 13: 22, 16: 22},
		{1: 109},
		{1: 106},
		{17: 98, 97, 99, 101, 100, 102, 107},
		{1: 108},
		// 40
		{2: 20, 4: 20, 10: 20, 13: 20, 16: 20},
		{17: 98, 97, 99, 101, 100, 102, 110},
		{1: 111},
		{2: 21, 4: 21, 10: 21, 13: 21, 16: 21},
		{2: 6, 4: 84, 38: 123},
		// 45
		{46: 114},
		{1: 116, 55: 115},
		{120, 2: 12, 4: 12},
		{9, 2: 9, 4: 9, 27: 118, 117, 31: 119},
		{11, 2: 11, 4: 11},
		// 50
		{8, 2: 8, 4: 8},
		{7, 2: 7, 4: 7},
		{1: 121},
		{9, 2: 9, 4: 9, 27: 118, 122, 31: 119},
		{10, 2: 10, 4: 10},
		// 55
		{2: 124},
		{5: 28, 28, 28, 28},
		{5: 29, 29, 29, 29},
		{9: 131, 48: 130},
		{9: 38},
		// 60
		{1: 129},
		{9: 37},
		{41: 140, 43: 139, 52: 138},
		{1: 134, 3: 35, 11: 133, 49: 132},
		{3: 137},
		// 65
		{135, 3: 34},
		{2, 3: 2},
		{1: 136},
		{1, 3: 1},
		{41: 36, 43: 36},
		// 70
		{2: 150},
		{9: 142, 42: 149},
		{9: 142, 42: 141},
		{145, 2: 32},
		{1: 134, 11: 143},
		// 75
		{135, 3: 144},
		{31, 2: 31},
		{9: 146},
		{1: 134, 11: 147},
		{135, 3: 148},
		// 80
		{30, 2: 30},
		{145, 2: 33},
		{5: 39, 39, 39, 39},
		{1: 152},
		{9: 153},
		// 85
		{1: 158, 14: 162, 25: 163, 159, 29: 155, 32: 156, 35: 161, 157, 40: 160, 63: 154},
		{188, 3: 187},
		{60, 3: 60},
		{59, 3: 59},
		{58, 3: 58},
		// 90
		{1: 178, 47: 177},
		{1: 173},
		{14: 162, 25: 163, 168},
		{14: 164},
		{1: 50},
		// 95
		{1: 49},
		{9: 165},
		{1: 134, 11: 166},
		{135, 3: 167},
		{51, 3: 51},
		// 100
		{1: 169},
		{9: 170},
		{1: 134, 11: 171},
		{135, 3: 172},
		{52, 3: 52},
		// 105
		{9: 174},
		{1: 134, 11: 175},
		{135, 3: 176},
		{53, 3: 53},
		{47, 3: 47, 12: 47, 15: 180, 34: 181, 45: 179},
		// 110
		{48, 3: 48, 12: 48, 15: 48, 34: 48},
		{44, 3: 44, 12: 184, 50: 183},
		{46, 3: 46, 12: 46},
		{15: 182},
		{45, 3: 45, 12: 45},
		// 115
		{54, 3: 54},
		{43, 186, 3: 43, 15: 185},
		{42, 3: 42},
		{41, 3: 41},
		{2: 40, 64: 192},
		// 120
		{1: 158, 14: 162, 25: 163, 159, 29: 189, 32: 190, 35: 161, 191, 40: 160},
		{57, 3: 57},
		{56, 3: 56},
		{55, 3: 55},
		{2: 193},
		// 125
		{5: 61, 61, 61, 61},
		{5: 65, 65, 65, 65},
	}
)

var yyDebug = 0

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyLexerEx interface {
	yyLexer
	Reduced(rule, state int, lval *yySymType) bool
}

func yySymName(c int) (s string) {
	x, ok := yyXLAT[c]
	if ok {
		return yySymNames[x]
	}

	if c < 0x7f {
		return __yyfmt__.Sprintf("%q", c)
	}

	return __yyfmt__.Sprintf("%d", c)
}

func yylex1(yylex yyLexer, lval *yySymType) (n int) {
	n = yylex.Lex(lval)
	if n <= 0 {
		n = yyEofCode
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("\nlex %s(%#x %d), lval: %+v\n", yySymName(n), n, n, lval)
	}
	return n
}

func yyParse(yylex yyLexer, stmt *[]Statment) int {
	const yyError = 72

	yyEx, _ := yylex.(yyLexerEx)
	var yyn int
	var yylval yySymType
	var yyVAL yySymType
	yyS := make([]yySymType, 200)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yyerrok := func() {
		if yyDebug >= 2 {
			__yyfmt__.Printf("yyerrok()\n")
		}
		Errflag = 0
	}
	_ = yyerrok
	yystate := 0
	yychar := -1
	var yyxchar int
	var yyshift int
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	if yychar < 0 {
		yylval.yys = yystate
		yychar = yylex1(yylex, &yylval)
		var ok bool
		if yyxchar, ok = yyXLAT[yychar]; !ok {
			yyxchar = len(yySymNames) // > tab width
		}
	}
	if yyDebug >= 4 {
		var a []int
		for _, v := range yyS[:yyp+1] {
			a = append(a, v.yys)
		}
		__yyfmt__.Printf("state stack %v\n", a)
	}
	row := yyParseTab[yystate]
	yyn = 0
	if yyxchar < len(row) {
		if yyn = int(row[yyxchar]); yyn != 0 {
			yyn += yyTabOfs
		}
	}
	switch {
	case yyn > 0: // shift
		yychar = -1
		yyVAL = yylval
		yystate = yyn
		yyshift = yyn
		if yyDebug >= 2 {
			__yyfmt__.Printf("shift, and goto state %d\n", yystate)
		}
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	case yyn < 0: // reduce
	case yystate == 1: // accept
		if yyDebug >= 2 {
			__yyfmt__.Println("accept")
		}
		goto ret0
	}

	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			if yyDebug >= 1 {
				__yyfmt__.Printf("no action for %s in state %d\n", yySymName(yychar), yystate)
			}
			msg, ok := yyXErrors[yyXError{yystate, yyxchar}]
			if !ok {
				msg, ok = yyXErrors[yyXError{yystate, -1}]
			}
			if !ok && yyshift != 0 {
				msg, ok = yyXErrors[yyXError{yyshift, yyxchar}]
			}
			if !ok {
				msg, ok = yyXErrors[yyXError{yyshift, -1}]
			}
			if yychar > 0 {
				ls := yyTokenLiteralStrings[yychar]
				if ls == "" {
					ls = yySymName(yychar)
				}
				if ls != "" {
					switch {
					case msg == "":
						msg = __yyfmt__.Sprintf("unexpected %s", ls)
					default:
						msg = __yyfmt__.Sprintf("unexpected %s, %s", ls, msg)
					}
				}
			}
			if msg == "" {
				msg = "syntax error"
			}
			yylex.Error(msg)
			Nerrs++
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				row := yyParseTab[yyS[yyp].yys]
				if yyError < len(row) {
					yyn = int(row[yyError]) + yyTabOfs
					if yyn > 0 { // hit
						if yyDebug >= 2 {
							__yyfmt__.Printf("error recovery found error shift in state %d\n", yyS[yyp].yys)
						}
						yystate = yyn /* simulate a shift of "error" */
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery failed\n")
			}
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yySymName(yychar))
			}
			if yychar == yyEofCode {
				goto ret1
			}

			yychar = -1
			goto yynewstate /* try again in the same state */
		}
	}

	r := -yyn
	x0 := yyReductions[r]
	x, n := x0.xsym, x0.components
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= n
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	exState := yystate
	yystate = int(yyParseTab[yyS[yyp].yys][x]) + yyTabOfs
	/* reduction by production r */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce using rule %v (%s), and goto state %d\n", r, yySymNames[x], yystate)
	}

	switch r {
	case 2:
		{
			*stmt = append(*stmt, yyS[yypt-0].stmt)
		}
	case 3:
		{
			*stmt = append(*stmt, yyS[yypt-0].stmt)
		}
	case 4:
		{
			yyVAL.stmt = Statment(yyS[yypt-0].createStmt)
		}
	case 5:
		{
			yyVAL.stmt = Statment(yyS[yypt-0].selectStmt)
		}
	case 6:
		{
			yyVAL.stmt = Statment(yyS[yypt-0].insertStmt)
		}
	case 7:
		{
			yyVAL.createStmt = &CreateStmt{Table: yyS[yypt-5].str, Def: yyS[yypt-3].tableDef, Option: yyS[yypt-1].tableOption}
		}
	case 8:
		{
			yyVAL.tableDef = &TableDef{
				Column: []*ColumnDef{yyS[yypt-0].columnDef},
				Index:  []*IndexDef{},
			}
		}
	case 9:
		{
			yyVAL.tableDef = &TableDef{
				Column: []*ColumnDef{},
				Index:  []*IndexDef{yyS[yypt-0].indexDef},
			}
		}
	case 10:
		{
			yyVAL.tableDef = &TableDef{
				Column:  []*ColumnDef{},
				Index:   []*IndexDef{},
				Primary: yyS[yypt-0].indexDef,
			}
		}
	case 11:
		{
			yyVAL.tableDef.Column = append(yyVAL.tableDef.Column, yyS[yypt-0].columnDef)
		}
	case 12:
		{
			yyVAL.tableDef.Index = append(yyVAL.tableDef.Index, yyS[yypt-0].indexDef)
		}
	case 13:
		{
			if yyVAL.tableDef.Primary == nil {
				yyVAL.tableDef.Primary = yyS[yypt-0].indexDef
			} else {
				__yyfmt__.Printf("重复定义主键 %v %v ", yyVAL.tableDef.Primary, yyS[yypt-0].indexDef)
				goto ret1
			}
		}
	case 14:
		{
			yyVAL.columnDef = &ColumnDef{FieldName: yyS[yypt-3].str, FieldType: yyS[yypt-2].columnDataType, AllowNull: yyS[yypt-1].boolean, Default: yyS[yypt-0].str}
		}
	case 15:
		{
			yyVAL.indexDef = &IndexDef{IndexName: yyS[yypt-3].str, IndexField: yyS[yypt-1].strList}
		}
	case 16:
		{
			yyVAL.indexDef = &IndexDef{IndexName: yyS[yypt-3].str, IndexField: yyS[yypt-1].strList, Unique: true}
		}
	case 17:
		{
			yyVAL.indexDef = &IndexDef{Primary: true, IndexField: yyS[yypt-1].strList}
		}
	case 20:
		{
			t, ok := typeMapping[yyS[yypt-0].str]

			if ok {
				yyVAL.columnDataType = t
			} else {
				__yyfmt__.Printf("不支持的数据类型 %s", yyS[yypt-0].str)
				goto ret1
			}
		}
	case 21:
		{
			yyVAL.boolean = true
		}
	case 22:
		{
			yyVAL.boolean = true
		}
	case 23:
		{
			yyVAL.boolean = false
		}
	case 24:
		{
			yyVAL.str = ""
		}
	case 25:
		{
			yyVAL.str = ""
		}
	case 26:
		{
			yyVAL.str = ""
		}
	case 27:
		{
			yyVAL.str = yyS[yypt-0].str
		}
	case 28:
		{
			yyVAL.tableOption = nil
		}
	case 29:
		{
			yyVAL.insertStmt = &InsertStmt{Into: yyS[yypt-3].str, ColumnList: yyS[yypt-2].strList, ValueList: yyS[yypt-1].valueList}
		}
	case 30:
		{
			yyVAL.str = yyS[yypt-0].str
		}
	case 31:
		{
			yyVAL.str = yyS[yypt-0].str
		}
	case 32:
		{
			yyVAL.strList = yyS[yypt-1].strList
		}
	case 33:
		{
			yyVAL.strList = nil
		}
	case 35:
		{
			yyVAL.valueList = yyS[yypt-0].valueList
		}
	case 36:
		{
			yyVAL.valueList = yyS[yypt-0].valueList
		}
	case 37:
		{
			yyVAL.valueList = [][]string{yyS[yypt-1].strList}
		}
	case 38:
		{
			yyVAL.valueList = append(yyS[yypt-4].valueList, yyS[yypt-1].strList)
		}
	case 39:
		{
			yyVAL.selectStmt = &SelectStmt{Filed: yyS[yypt-2].selectFieldList, Limit: yyS[yypt-1].selectStmtLimit}
		}
	case 40:
		{
			yyVAL.selectStmt = &SelectStmt{Filed: yyS[yypt-5].selectFieldList, From: yyS[yypt-4].selectStmtFrom, Where: yyS[yypt-3].selectStmtWhere, Order: yyS[yypt-2].orderFieldList, Limit: yyS[yypt-1].selectStmtLimit}
		}
	case 41:
		{
			yyVAL.selectFieldList = SelectFieldList{&SelectField{Field: yyS[yypt-0].str}}
		}
	case 42:
		{
			yyVAL.selectFieldList = append(yyS[yypt-2].selectFieldList, &SelectField{Field: yyS[yypt-0].str})
		}
	case 43:
		{
			yyVAL.selectStmtFrom = &SelectStmtFrom{
				Table: yyS[yypt-0].str,
			}
		}
	case 44:
		{
			yyVAL.selectStmtWhere = nil
		}
	case 45:
		{
			yyVAL.selectStmtWhere = yyS[yypt-0].selectStmtWhere
		}
	case 46:
		{
			yyVAL.selectStmtWhere = &SelectStmtWhere{Field: &WhereField{Field: yyS[yypt-2].str, Value: yyS[yypt-0].str, Compare: yyS[yypt-1].compareOp}}
		}
	case 47:
		{
			yyS[yypt-4].selectStmtWhere.Or = &WhereField{Field: yyS[yypt-2].str, Value: yyS[yypt-0].str, Compare: yyS[yypt-1].compareOp}
			yyVAL.selectStmtWhere = yyS[yypt-4].selectStmtWhere
		}
	case 48:
		{
			yyS[yypt-4].selectStmtWhere.And = &WhereField{Field: yyS[yypt-2].str, Value: yyS[yypt-0].str, Compare: yyS[yypt-1].compareOp}
			yyVAL.selectStmtWhere = yyS[yypt-4].selectStmtWhere
		}
	case 49:
		{
			yyVAL.compareOp = EQ
		}
	case 50:
		{
			yyVAL.compareOp = LT
		}
	case 51:
		{
			yyVAL.compareOp = GT
		}
	case 52:
		{
			yyVAL.compareOp = LE
		}
	case 53:
		{
			yyVAL.compareOp = GE
		}
	case 54:
		{
			yyVAL.compareOp = NE
		}
	case 55:
		{
			yyVAL.orderFieldList = nil
		}
	case 56:
		{
			yyVAL.orderFieldList = yyS[yypt-0].orderFieldList
		}
	case 57:
		{
			yyVAL.orderFieldList = OrderFieldList{&OrderField{Field: yyS[yypt-1].str, Asc: yyS[yypt-0].boolean}}
		}
	case 58:
		{
			yyVAL.orderFieldList = append(yyS[yypt-3].orderFieldList, &OrderField{Field: yyS[yypt-1].str, Asc: yyS[yypt-0].boolean})
		}
	case 59:
		{
			yyVAL.boolean = true
		}
	case 60:
		{
			yyVAL.boolean = true
		}
	case 61:
		{
			yyVAL.boolean = false
		}
	case 62:
		{
			yyVAL.selectStmtLimit = nil
		}
	case 63:
		{
			size, err := strconv.Atoi(yyS[yypt-0].str)
			if err != nil {
				fmt.Println(err)
				return -1
			}
			yyVAL.selectStmtLimit = &SelectStmtLimit{Size: size}
		}
	case 64:
		{

			offset, err := strconv.Atoi(yyS[yypt-2].str)
			if err != nil {
				__yyfmt__.Println(err)
				goto ret1
			}
			size, err := strconv.Atoi(yyS[yypt-0].str)
			if err != nil {
				__yyfmt__.Println(err)
				goto ret1
			}
			yyVAL.selectStmtLimit = &SelectStmtLimit{Offset: offset, Size: size}
		}
	case 65:
		{
			offset, err := strconv.Atoi(yyS[yypt-0].str)
			if err != nil {
				__yyfmt__.Println(err)
				goto ret1
			}
			size, err := strconv.Atoi(yyS[yypt-2].str)
			if err != nil {
				__yyfmt__.Println(err)
				goto ret1
			}
			yyVAL.selectStmtLimit = &SelectStmtLimit{Offset: offset, Size: size}
		}
	case 66:
		{
			yyVAL.strList = []string{yyS[yypt-0].str}
		}
	case 67:
		{
			yyVAL.strList = append(yyS[yypt-2].strList, yyS[yypt-0].str)
		}

	}

	if yyEx != nil && yyEx.Reduced(r, exState, &yyVAL) {
		return -1
	}
	goto yystack /* stack new state and value */
}

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: pkg/clientpb/client.proto

package clientpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// KvdbClient is the client API for Kvdb service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KvdbClient interface {
	Register(ctx context.Context, in *Auth, opts ...grpc.CallOption) (*Response, error)
	Get(ctx context.Context, in *ReadonlyQuery, opts ...grpc.CallOption) (*Response, error)
	Put(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	Delete(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	Config(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
}

type kvdbClient struct {
	cc grpc.ClientConnInterface
}

func NewKvdbClient(cc grpc.ClientConnInterface) KvdbClient {
	return &kvdbClient{cc}
}

func (c *kvdbClient) Register(ctx context.Context, in *Auth, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/clientpb.Kvdb/register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kvdbClient) Get(ctx context.Context, in *ReadonlyQuery, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/clientpb.Kvdb/get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kvdbClient) Put(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/clientpb.Kvdb/put", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kvdbClient) Delete(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/clientpb.Kvdb/delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kvdbClient) Config(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/clientpb.Kvdb/config", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KvdbServer is the server API for Kvdb service.
// All implementations must embed UnimplementedKvdbServer
// for forward compatibility
type KvdbServer interface {
	Register(context.Context, *Auth) (*Response, error)
	Get(context.Context, *ReadonlyQuery) (*Response, error)
	Put(context.Context, *Request) (*Response, error)
	Delete(context.Context, *Request) (*Response, error)
	Config(context.Context, *Request) (*Response, error)
	mustEmbedUnimplementedKvdbServer()
}

// UnimplementedKvdbServer must be embedded to have forward compatible implementations.
type UnimplementedKvdbServer struct {
}

func (UnimplementedKvdbServer) Register(context.Context, *Auth) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedKvdbServer) Get(context.Context, *ReadonlyQuery) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedKvdbServer) Put(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Put not implemented")
}
func (UnimplementedKvdbServer) Delete(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedKvdbServer) Config(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Config not implemented")
}
func (UnimplementedKvdbServer) mustEmbedUnimplementedKvdbServer() {}

// UnsafeKvdbServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KvdbServer will
// result in compilation errors.
type UnsafeKvdbServer interface {
	mustEmbedUnimplementedKvdbServer()
}

func RegisterKvdbServer(s grpc.ServiceRegistrar, srv KvdbServer) {
	s.RegisterService(&Kvdb_ServiceDesc, srv)
}

func _Kvdb_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Auth)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KvdbServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clientpb.Kvdb/register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KvdbServer).Register(ctx, req.(*Auth))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kvdb_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadonlyQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KvdbServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clientpb.Kvdb/get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KvdbServer).Get(ctx, req.(*ReadonlyQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kvdb_Put_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KvdbServer).Put(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clientpb.Kvdb/put",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KvdbServer).Put(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kvdb_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KvdbServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clientpb.Kvdb/delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KvdbServer).Delete(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kvdb_Config_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KvdbServer).Config(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clientpb.Kvdb/config",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KvdbServer).Config(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

// Kvdb_ServiceDesc is the grpc.ServiceDesc for Kvdb service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Kvdb_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "clientpb.Kvdb",
	HandlerType: (*KvdbServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "register",
			Handler:    _Kvdb_Register_Handler,
		},
		{
			MethodName: "get",
			Handler:    _Kvdb_Get_Handler,
		},
		{
			MethodName: "put",
			Handler:    _Kvdb_Put_Handler,
		},
		{
			MethodName: "delete",
			Handler:    _Kvdb_Delete_Handler,
		},
		{
			MethodName: "config",
			Handler:    _Kvdb_Config_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/clientpb/client.proto",
}
